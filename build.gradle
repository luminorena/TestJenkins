//noinspection GroovyAssignabilityCheck
plugins {
    id 'java-library'
    id "io.qameta.allure" version "2.11.2"
    id "org.gradle.test-retry" version "1.5.0"
}



allure {
    report {
        version.set("2.24.0")
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set("2.24.0")
            }
        }
    }
}
repositories {
    mavenCentral()
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

group 'test.jenkins'
version '1.0'
//noinspection GroovyAssignabilityCheck
repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

compileJava {
    options.encoding='UTF-8'
}

compileTestJava {
    options.encoding='UTF-8'
}

dependencies {
    testImplementation(
            'org.hamcrest:hamcrest-all:1.3',
            'org.junit.jupiter:junit-jupiter-engine:5.9.2',
            'org.junit.jupiter:junit-jupiter-api:5.9.2',
            'com.codeborne:selenide:6.12.3',
            'org.junit.jupiter:junit-jupiter-params:5.9.2',
            'org.slf4j:slf4j-simple:2.0.5',
            'org.aspectj:aspectjweaver:1.9.19',
            'com.github.javafaker:javafaker:1.0.2',
            'io.qameta.allure:allure-selenide:2.21.0',
            'org.assertj:assertj-core:3.24.2',
            'com.github.javafaker:javafaker:1.0.2',
            'org.aeonbits.owner:owner:1.0.12',
            'org.projectlombok:lombok:1.18.28',
            'io.github.artsok:rerunner-jupiter:2.1.6'

    )
}
if (System.getProperty("threads") != null) {
    systemProperties += [
            'junit.jupiter.execution.parallel.enabled'                 : true,
            'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
            'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
            'junit.jupiter.execution.parallel.config.strategy' : 'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
    ]
}
//noinspection GroovyAssignabilityCheck
// tasks.withType(Test).configureEach()
test {
    systemProperties(System.getProperties())
    useJUnitPlatform()
    retry {
        maxRetries = 2
        maxFailures = 30
        // считать ли тест упавшим, если он зеленый при перезапуске
        failOnPassedAfterRetry = false
    }
}
//noinspection GroovyAssignabilityCheck
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task simple_test(type: Test) {
    useJUnitPlatform {
        includeTags("simple")
    }
}

task remote_test(type: Test) {
    useJUnitPlatform {
        includeTags("remote")
    }
}

